{"version":3,"sources":["../../../src/node/request.js"],"names":["request","nodeFetch","fetch","eval","url","options","query","raw","json","then","response","text","jsonRequest","headers"],"mappings":";;;;;kBAUwBA,O;;AAVxB;;AAEA,IAAIC,SAAJ;;AAEA,IAAI,OAAOC,KAAP,KAAiB,WAArB,EAAkC;AAC9BD,gBAAYE,KAAK,uBAAL,CAAZ;AACH,CAFD,MAEO;AACHF,gBAAYC,KAAZ;AACH;;AAEc,SAASF,OAAT,CAAiBI,GAAjB,EAAsBC,OAAtB,EAA+B;AAC1C,QAAIC,QAAQD,QAAQC,KAApB;AACA,WAAOD,QAAQC,KAAf;;AAEAF,WAAQE,QAAQ,MAAM,uBAAWA,KAAX,CAAd,GAAkC,EAA1C;;AAEA,QAAID,QAAQE,GAAZ,EAAiB;AACb,eAAON,UAAUG,GAAV,EAAeC,OAAf,CAAP;AACH;;AAED,QAAI,CAACA,QAAQG,IAAb,EAAmB;AACf,eAAOP,UAAUG,GAAV,EAAeC,OAAf,EAAwBI,IAAxB,CAA6B,UAACC,QAAD;AAAA,mBAAcA,SAASC,IAAT,EAAd;AAAA,SAA7B,CAAP;AACH;;AAED,WAAOC,YAAYP,OAAZ,EAAqBD,GAArB,CAAP;AACH;;AAED,SAASQ,WAAT,CAAqBP,OAArB,EAA8BD,GAA9B,EAAmC;AAC/BC,YAAQQ,OAAR,GAAkBR,QAAQQ,OAAR,IAAmB,EAArC;AACA,uBAAOR,QAAQQ,OAAf,EAAwB;AACpB,kBAAU,kBADU;AAEpB,wBAAgB;AAFI,KAAxB;AAIA,WAAOZ,UAAUG,GAAV,EAAeC,OAAf,EAAwBI,IAAxB,CAA6B,UAACC,QAAD;AAAA,eAAcA,SAASF,IAAT,EAAd;AAAA,KAA7B,CAAP;AACH","file":"request.js","sourcesContent":["import { extend, toUrlParam } from '../commons/utils';\n\nvar nodeFetch;\n\nif (typeof fetch === 'undefined') {\n    nodeFetch = eval(\"require('node-fetch')\");\n} else {\n    nodeFetch = fetch;\n}\n\nexport default function request(url, options) {\n    var query = options.query;\n    delete options.query;\n\n    url += (query ? '?' + toUrlParam(query) : '');\n\n    if (options.raw) {\n        return nodeFetch(url, options);\n    }\n\n    if (!options.json) {\n        return nodeFetch(url, options).then((response) => response.text());\n    }\n\n    return jsonRequest(options, url);\n}\n\nfunction jsonRequest(options, url) {\n    options.headers = options.headers || {};\n    extend(options.headers, {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json;charset=UTF-8',\n    });\n    return nodeFetch(url, options).then((response) => response.json());\n}\n"]}