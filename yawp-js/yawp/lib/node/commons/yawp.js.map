{"version":3,"sources":["../../../src/commons/yawp.js"],"names":["baseUrl","defaultFetchOptions","normalize","arg","Object","extractId","hasId","object","id","request","yawpFn","baseArg","options","q","Yawp","props","cb","promise","createOrUpdate","then","url","constructor","update","create","destroy","action","get","put","_patch","post","_delete","_options","clear","type","prepareRequestOptions","method","json","objects","map","wrapInstance","baseRequest","result","Array","wrapArray","parentBaseArg","parentBase","t","param","data","arguments","length","where","slice","call","order","sort","limit","undefined","wrappedRequest","keys","JSON","stringify","setupQuery","list","body","params","query","key","value","verb","path","constructorFn","base","_super","sub","bindBaseMethods","apply","super","self","getOwnPropertyNames","prototype","i","l","bind","config","c","patch","baseApi"],"mappings":"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","file":"yawp.js","sourcesContent":["import { extend } from './utils';\n\nlet baseUrl = '/api';\nlet defaultFetchOptions = {};\n\nfunction normalize(arg) {\n    if (!arg) {\n        return '';\n    }\n    if (arg instanceof Object) {\n        return extractId(arg);\n    }\n    return arg;\n}\n\nfunction hasId(object) {\n    return object.id;\n}\n\nfunction extractId(object) {\n    if (hasId(object)) {\n        return object.id;\n    }\n    throw 'use yawp(id) if your endpoint does not have a @Id field called id';\n}\n\nexport default (request) => {\n\n    function yawpFn(baseArg) {\n\n        let options = {};\n        let q = {};\n\n        class Yawp {\n\n            constructor(props) {\n                if (props) {\n                    extend(this, props);\n                }\n            }\n\n            // request\n\n            static clear() {\n                options = {\n                    url: normalize(baseArg)\n                };\n                q = {};\n            }\n\n            static prepareRequestOptions() {\n                let _options = extend({}, options);\n                this.clear();\n                return _options;\n            }\n\n            static baseRequest(type) {\n                let options = this.prepareRequestOptions();\n\n                let url = baseUrl + options.url;\n                delete options.url;\n\n                options.method = type;\n                options.json = true;\n                extend(options, defaultFetchOptions);\n\n\n                return request(url, options);\n            }\n\n            static wrapInstance(object) {\n                return new this(object);\n            }\n\n            static wrapArray(objects) {\n                return objects.map((object) => this.wrapInstance(object));\n            }\n\n            static wrappedRequest(type) {\n                return this.baseRequest(type).then((result) => {\n                    if (Array === result.constructor) {\n                        return this.wrapArray(result);\n                    }\n                    return this.wrapInstance(result)\n                });\n            }\n\n            // query\n\n            static from(parentBaseArg) {\n                let parentBase = normalize(parentBaseArg);\n                options.url = parentBase + options.url;\n                return this;\n            }\n\n            static transform(t) {\n                this.param('t', t);\n                return this;\n            }\n\n            static where(data) {\n                if (arguments.length === 1) {\n                    q.where = data;\n                } else {\n                    q.where = [].slice.call(arguments);\n                }\n                return this;\n            }\n\n            static order(data) {\n                q.order = data;\n                return this;\n            }\n\n            static sort(data) {\n                q.sort = data;\n                return this;\n            }\n\n            static limit(data) {\n                q.limit = data;\n                return this;\n            }\n\n            static fetch(arg) {\n                let cb = typeof arg === 'function' ? arg : undefined;\n\n                if (arg && !cb) {\n                    options.url += '/' + arg;\n                }\n\n                let promise = this.wrappedRequest('GET');\n\n                if (cb) {\n                    return promise.then(cb);\n                }\n\n                return promise;\n            }\n\n            static setupQuery() {\n                if (Object.keys(q).length > 0) {\n                    this.param('q', JSON.stringify(q));\n                }\n            }\n\n            static list(cb) {\n                this.setupQuery();\n\n                let promise = this.wrappedRequest('GET');\n\n                if (cb) {\n                    return promise.then(cb);\n                }\n                return promise;\n            }\n\n            static first(cb) {\n                this.limit(1);\n\n                return this.list((objects) => {\n                    let object = objects.length === 0 ? null : objects[0];\n                    return cb ? cb(object) : object;\n                });\n            }\n\n            static only(cb) {\n                return this.list((objects) => {\n                    if (objects.length !== 1) {\n                        throw 'called only but got ' + objects.length + ' results';\n                    }\n                    let object = objects[0];\n                    return cb ? cb(object) : object;\n                });\n            }\n\n            // repository\n\n            static create(object) {\n                options.body = JSON.stringify(object);\n                return this.wrappedRequest('POST');\n            }\n\n            static update(object) {\n                options.url = object.id;\n                options.body = JSON.stringify(object);\n                return this.wrappedRequest('PUT');\n            }\n\n            static patch(object) {\n                options.url = object.id;\n                options.body = JSON.stringify(object);\n                return this.wrappedRequest('PATCH');\n            }\n\n            static destroy(object) {\n                if (object) {\n                    options.url = extractId(object);\n                }\n                return this.baseRequest('DELETE');\n            }\n\n            // actions\n\n            static json(object) {\n                options.body = JSON.stringify(object);\n                return this;\n            }\n\n            static params(params) {\n                options.query = extend(options.query, params);\n                return this;\n            }\n\n            static param(key, value) {\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[key] = value;\n            }\n\n            static action(verb, path) {\n                options.url += '/' + path;\n                return this.baseRequest(verb);\n            }\n\n            static get(action) {\n                return this.action('GET', action);\n            }\n\n            static put(action) {\n                return this.action('PUT', action);\n            }\n\n            static _patch(action) {\n                return this.action('PATCH', action);\n            }\n\n            static post(action) {\n                return this.action('POST', action);\n            }\n\n            static _delete(action) {\n                return this.action('DELETE', action);\n            }\n\n            // es5 subclassing\n\n            static subclass(constructorFn) {\n                let base = yawpFn(baseArg);\n                let _super = this;\n                let sub = class extends base {\n                    constructor() {\n                        super();\n                        _super.bindBaseMethods(this, base);\n                        if (constructorFn) {\n                            constructorFn.apply(this, arguments);\n                        } else {\n                            super.constructor.apply(this, arguments);\n                        }\n                    }\n                };\n                sub.super = base;\n                return sub;\n            }\n\n            static bindBaseMethods(self, base) {\n                self.super = () => {\n                };\n                var keys = Object.getOwnPropertyNames(base.prototype);\n                for (let i = 0, l = keys.length; i < l; i++) {\n                    let key = keys[i];\n                    self.super[key] = base.prototype[key].bind(self);\n                }\n            }\n\n            // instance method\n\n            save(cb) {\n                let promise = this.createOrUpdate();\n                return cb ? promise.then(cb) : promise;\n            }\n\n            createOrUpdate() {\n                let promise;\n                if (hasId(this)) {\n                    options.url = this.id;\n                    promise = this.constructor.update(this);\n                } else {\n                    promise = this.constructor.create(this).then((object) => {\n                        this.id = object.id;\n                        return object;\n                    });\n                }\n                return promise;\n            }\n\n            destroy(cb) {\n                let promise = this.constructor.destroy(this);\n                return cb ? promise.then(cb) : promise;\n            }\n\n            get(action) {\n                options.url = extractId(this);\n                return this.constructor.get(action);\n            }\n\n            put(action) {\n                options.url = extractId(this);\n                return this.constructor.put(action);\n            }\n\n            _patch(action) {\n                options.url = extractId(this);\n                return this.constructor._patch(action);\n            }\n\n            post(action) {\n                options.url = extractId(this);\n                return this.constructor.post(action);\n            }\n\n            _delete(action) {\n                options.url = extractId(this);\n                return this.constructor._delete(action);\n            }\n        }\n\n        Yawp.clear();\n        return Yawp;\n    }\n\n    // base api\n\n    function config(cb) {\n        let c = {\n            baseUrl: (url) => {\n                baseUrl = url;\n            },\n            defaultFetchOptions: (options) => {\n                defaultFetchOptions = options;\n            }\n        };\n        cb(c);\n    };\n\n    function update(object) {\n        let id = extractId(object);\n        return yawpFn(id).update(object);\n    }\n\n    function patch(object) {\n        let id = extractId(object);\n        return yawpFn(id).patch(object);\n    }\n\n    function destroy(object) {\n        let id = extractId(object);\n        return yawpFn(id).destroy(object);\n    }\n\n    let baseApi = {\n        config,\n        update,\n        patch,\n        destroy\n    }\n\n    return extend(yawpFn, baseApi);\n}"]}